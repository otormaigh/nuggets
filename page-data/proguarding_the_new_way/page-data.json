{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/proguarding_the_new_way/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Proguarding the New Way\",\n  \"tags\": [\"android\", \"proguard\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Proguarding your builds is relatively easy and should always be done. Although device storage and data plans nowadays are not as constrained as they used to be, that still doesn't mean we should 'abuse' the users resources because we were too lazy to add a few lines of code to our project.\"), mdx(\"p\", null, \"Believe it or not, there are two different ways to proguard a build. The old way and the secret way. Officially, the secret way doesn't really exist (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html#com.android.build.gradle.internal.dsl.BuildType:postprocessing\"\n  }), \"this\"), \" is the only 'official' reference I can find, it's been marked as 'incubating' for at least the last year or two), in the Android documentation on proguarding a project, the old way is still referenced.\"), mdx(\"p\", null, \"I can't remember how I came across this new set of APIs, but ever since then it's what I've used and it hasn't let me down.\"), mdx(\"h4\", {\n    \"id\": \"old-way\"\n  }, \"Old way\"), mdx(\"p\", null, \"This is the way you are probably used to seeing. (NOTE: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumerProguardFiles\"), \" should only be used in library modules so that it can expose its rules to an app module. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"proguardFiles\"), \" should only be used in an app module. Both do not need to be defined in the same config).\"), mdx(\"p\", null, \"This will, minify (proguard) your build, strip out any unused resources and use the applied rule files to prevent any breakages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"buildTypes {\\n  release {\\n    minifyEnabled true\\n    shrinkResources true\\n    proguardFiles getDefaultProguardFiles('', proguard-rules.pro)\\n    consumerProguardFiles 'consumer-rules.pro'\\n  }\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"new-secret-way\"\n  }, \"New (secret) way\"), mdx(\"p\", null, \"Introducing the 'new' (not really) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"postprocessing\"), \" block. It basically does the same as the above, but in a more defined and scoped way. You also have access to a more fine grained config. (NOTE: In library modules, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeUnusedResources\"), \" should always be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", you'll get a warning if you set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", read the warning, it'll explain) The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"proguardFiles\"), \" line from the above has been split up into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"proguardFiles\"), \" which is your app specific rules and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"optimizeCode\"), \" flag which if set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" will apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"proguard-android-optimize.txt\"), \" rules as-well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"buildTypes {\\n  release {\\n    postprocessing {\\n      proguardFiles 'proguard-rules.pro'\\n      consumerProguardFiles 'consumer-rules.pro'\\n      removeUnusedResources = true\\n      removeUnusedCode = true\\n      optimizeCode = true\\n      obfuscate = true\\n    }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Proguarding the New Way","tags":["android","proguard"],"emoji":null,"link":null},"fields":{"dateModified":"16th Jun 2020","slug":"/proguarding_the_new_way/"},"tableOfContents":{},"parent":{"__typename":"File","name":"proguarding_the_new_way","fileName":"proguarding_the_new_way.md"}}},"pageContext":{"id":"dfac8bb5-d4bf-5306-81d9-a1b7dc73c796","previous":{"id":"ce48535e-3e47-5228-ad98-7d979c202fbc","frontmatter":{"title":"Set Local Git user config","tags":["git"]},"fields":{"slug":"/set_local_git_user_config/"}},"next":{"id":"f36ddab4-98cf-5d31-ab54-258a67792296","frontmatter":{"title":"Delete remote Git tag","tags":["git"]},"fields":{"slug":"/delete_remote_git_tag/"}},"hasUntagged":false,"basePath":"/"}}}